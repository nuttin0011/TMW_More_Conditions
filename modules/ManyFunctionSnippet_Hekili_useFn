-- Many Function Version Hekili addon 10.0.5/17c
-- Set Priority to 7
--[[
function IROVar.Hekili.GetKeyBind()
counter "hekilikey" as below
counter "hekilicdstatus" 0 = off , 1 = on
"hekilidefstatus" 0 = off , 1 = on
"hekilimodestatus" 0 = single , 1 = auto , 2 = aoe
function IROVar.Hekili.CheckNextSkill(s1,counterName)
    if Skill 2 ~= S1 then Set counterName to 1 then 2 sec set back to 0
    note s1 = Hikili skill format
function Hekili.State.CheckDragonfireBombDispenser=CheckDragonfireBombDispenser
function Hekili.State.PrintVal=PrintVal(a,b,c)
function Hekili.State.SetImpsRequiredToZero()
function Hekili.State.TurnOffCycleTarget()
function IROVar.Hekili.DelaySkill(s,t)

function IROVar.Hekili.cooldownsON()
function IROVar.Hekili.cooldownsOFF()

counter "overridecd" 0 = no override CD, 1 = always off , 2 = always on
]]

local playerName = IROVar.playerName
local realmName = IROVar.realmName
if not TellMeWhenDB.ERODPSHekiliOptions then
    TellMeWhenDB.ERODPSHekiliOptions={}
end
if not TellMeWhenDB.ERODPSHekiliOptions[realmName] then
    TellMeWhenDB.ERODPSHekiliOptions[realmName]={}
end
if not TellMeWhenDB.ERODPSHekiliOptions[realmName][playerName] then
    TellMeWhenDB.ERODPSHekiliOptions[realmName][playerName]={}
end

local TMWDB=TellMeWhenDB.ERODPSHekiliOptions[realmName][playerName]

--dud 102 103 104 105
if IROSpecID>=102 and IROSpecID<=105 then
    IROVar.CV.Register_Player_Aura_Has("Berserk","playerhasberserk")
    IROVar.CV.Register_Player_Aura_Has("Incarnation: Avatar of Ashamane","playerhasincarnationaoa")
    IROVar.CV.Register_Player_Aura_Has("Apex Predator's Craving","playerhasapexpc")
    IROVar.CV.Register_Player_Power(3,"en")
end
--Warlock 265 266 267
if IROSpecID>=265 and IROSpecID<=267 then
    IROVar.CV.Register_Player_Power(7,"soulshard")
end

local usedKey={
    [""]=0,
    ["1"]=1,
    ["2"]=2,
    ["3"]=3,
    ["4"]=4,
    ["5"]=5,
    ["6"]=6,
    ["7"]=7,
    ["8"]=8,
    ["9"]=9,
    ["0"]=10,
    ["-"]=11,
    ["="]=12,
    ["F1"]=21,
    ["F2"]=22,
    ["F3"]=23,
    ["F4"]=24,
    ["F5"]=25,
    ["F6"]=26,
    ["F7"]=27,["CF7"]=271,["SF7"]=272,
    ["F8"]=28,["CF8"]=281,["SF8"]=282,
    ["F9"]=29,["CF9"]=291,["SF9"]=292,
    ["F10"]=30,["CF10"]=301,["SF10"]=302,
    ["F11"]=31,["CF11"]=311,["SF11"]=312,
    ["F12"]=32,["CF12"]=321,["SF12"]=322,
    ["cycle"]=99, -- click next enemy

--    ["A"]=65,
--    ["B"]=66,
--    ["C"]=67,

}

local CounterToKey={
    ["a"]="1",
    ["b"]="2",
    ["c"]="3",
    ["d"]="4",
    ["e"]="5",
    ["f"]="6",
    ["g"]="7",
    ["h"]="8",
    ["i"]="9",
    ["j"]="0",
    ["k"]="-",
    ["l"]="=",
    ["m"]="F1",
    ["n"]="F2",
    ["o"]="F3",
    ["p"]="F4",
    ["q"]="F5",
    ["r"]="F6",
    ["s"]="F7",["ss"]="CF7",["sss"]="SF7",
    ["t"]="F8",["tt"]="CF8",["ttt"]="SF8",
    ["u"]="F9",["uu"]="CF9",["uuu"]="SF9",
    ["v"]="F10",["vv"]="CF10",["vvv"]="SF10",
    ["w"]="F11",["ww"]="CF11",["www"]="SF11",
    ["x"]="F12",["xx"]="CF12",["xxx"]="SF12",
}

local KeyEnable={}

for k,v in pairs(CounterToKey) do
    TMW_ST:UpdateCounter(k,1)
    KeyEnable[v]=true
end

local KeyToColor={
    [""]="ff000000",
    ["1"]="ff001100",
    ["2"]="ff001200",
    ["3"]="ff001300",
    ["4"]="ff001400",
    ["5"]="ff001500",
    ["6"]="ff001600",
    ["7"]="ff001700",
    ["8"]="ff001800",
    ["9"]="ff001900",
    ["0"]="ff001a00",
    ["-"]="ff001b00",
    ["="]="ff001c00",
    ["F1"]="ff002100",
    ["F2"]="ff002200",
    ["F3"]="ff002300",
    ["F4"]="ff002400",
    ["F5"]="ff002500",
    ["F6"]="ff002600",
    ["F7"]="ff002700",["CF7"]="ff012701",["SF7"]="ff042704",
    ["F8"]="ff002800",["CF8"]="ff012801",["SF8"]="ff042804",
    ["F9"]="ff002900",["CF9"]="ff012901",["SF9"]="ff042904",
    ["F10"]="ff002a00",["CF10"]="ff012a01",["SF10"]="ff042a04",
    ["F11"]="ff002b00",["CF11"]="ff012b01",["SF11"]="ff042b04",
    ["F12"]="ff002c00",["CF12"]="ff012c01",["SF12"]="ff042c04",
    ["cycle"]="ff0a010a", -- click next enemy
--    ["A"]=65,
--    ["B"]=66,
--    ["C"]=67,
}
local ColorToKey={}
for k,v in pairs(KeyToColor) do
    ColorToKey[v]=k
end

if not IROVar then IROVar={} end
if not IROVar.Hekili then IROVar.Hekili={} end


local dealySkill={}

function IROVar.Hekili.DelaySkill(s,t)
    if not dealySkill[s] then
        dealySkill[s]=true
        do
            local tt=t
            local ss=s
            C_Timer.After(tt,function() dealySkill[ss]=nil end)
        end
    end
end


local Hekili=Hekili
local COUNTERS=TMW.COUNTERS
local TMW=TMW

local function val(x)
    if not x then return "nil" end
    local t=type(x)
    if t=="number" or t=="string" then return x end
    if t=="boolean" then return x and "true" or "false" end
    return t
end

local function PrintVal(a,b,c)
    print(GetTime(),val(a),val(b),val(c))
    return true
end

local function PrintVal1stIndex(a,b,c)
    if Hekili.State.index==1 then
        print(GetTime(),val(a),val(b),val(c))
    end
    return true
end

local function SetImpsRequiredToZero()
    Hekili.State.settings.spec.settings.dcon_imps=0
    return true
end

local function TurnOffCycleTarget()
    Hekili.DB.profile.specs[IROSpecID].cycle=false
    return true
end

if Hekili then
    Hekili.State.COUNTERS=COUNTERS
    Hekili.State.IsSpellOverlayed=Hekili.State.IsSpellOverlayed or IsSpellOverlayed
    Hekili.State.PrintVal=PrintVal
    Hekili.State.PrintVal1stIndex=PrintVal1stIndex
    Hekili.State.SetImpsRequiredToZero=SetImpsRequiredToZero
    Hekili.State.TurnOffCycleTarget=TurnOffCycleTarget
    Hekili.State.CheckInteractDistance=CheckInteractDistance
    Hekili.State.GetSpellCount=GetSpellCount
else
    C_Timer.After(5,function() Hekili.State.COUNTERS=COUNTERS end)
end

--PLAYER_STARTED_MOVING  PLAYER_STOPPED_MOVING
local PlayerMove=false
local PlayerLastMove=0
local PlayerLastStopMove=TMW.time
TMW_ST:AddEvent("PLAYER_STARTED_MOVING",function()PlayerMove=true PlayerLastMove=TMW.time end)
TMW_ST:AddEvent("PLAYER_STOPPED_MOVING",function()PlayerMove=false PlayerLastStopMove=TMW.time end)
local function StandingTime()
    return PlayerMove and 0 or (TMW.time-PlayerLastStopMove)
end

local _Wait=255
local _Tyrant=266
local _HoG=556

local function CheckSpecialTreatment(skillName)
    local function SSmorethan(n)
        return (COUNTERS.soulshard>=n) or (COUNTERS.soulshard + (UnitCastingInfo("player")=="Shadow Bolt" and 1 or 0)>=n)
    end
    if dealySkill[skillName] then
        return _Wait
    end
    if COUNTERS.npastopcastingnotify == 1 then
        if select(4,GetSpellInfo(Hekili.State.action[skillName].name)) > 0 then
            return _Wait
        end
    end
    --skillName = Hekili SkillName format
    -- counter "playernothasquake" 1 mean not has quake affic
    --GetUnitSpeed("target")
    if IROSpecID==577 then -- DH Havoc
        if skillName=="eye_beam" then
            return ((COUNTERS["wantinterrupt"]==0)or(COUNTERS["intericon"]==0))and
            (COUNTERS["targethptimeremain"]>=8)and UnitCanAttack("player","target")and(IsSpellInRange("Chaos Strike","target")==1)
            and(COUNTERS["playernothasquake"]==1)and(StandingTime()>0.4)
        elseif skillName=="glaive_tempest" then
            return UnitCanAttack("player","target")and(IsSpellInRange("Chaos Strike","target")==1)and(GetUnitSpeed("target")==0)
        elseif skillName=="death_sweep" or skillName=="blade_dance" then
            return UnitCanAttack("player","target")and(IsSpellInRange("Chaos Strike","target")==1)
        elseif skillName=="immolation_aura" then
            return UnitCanAttack("player","target")and(IsSpellInRange("Chaos Strike","target")==1)
        elseif skillName=="metamorphosis" then
            return UnitCanAttack("player","target")and(IsSpellInRange("Chaos Strike","target")==1)
        elseif skillName=="essence_break" then
            return (COUNTERS["targethptimeremain"]>=8)and UnitCanAttack("player","target")and(IsSpellInRange("Chaos Strike","target")==1)
        end
    elseif IROSpecID==103 then -- Dud Feral
        if skillName=="tigers_fury" then
            return UnitCanAttack("player","target")and(IsSpellInRange("Rake","target")==1)
        elseif skillName=="algethar_puzzle_box" then
            return UnitCanAttack("player","target")and(IsSpellInRange("Rake","target")==1)and(StandingTime()>0.4)
        elseif (skillName=="incarnation")or(skillName=="berserk")then
            return UnitCanAttack("player","target")and(IsSpellInRange("Rake","target")==1)
        elseif skillName=="convoke_the_spirits" then
            return UnitCanAttack("player","target")and(IsSpellInRange("Rake","target")==1)
        elseif skillName=="ferocious_bite" then
            if COUNTERS.playerhasapexpc==1 then
                return true
            end
            if Hekili.State.talent.soul_of_the_forest.enabled and COUNTERS.playerhasberserk==1 or COUNTERS.playerhasincarnationaoa==1 then
                return true
            end
            local enUse=50
            if Hekili.State.talent.relentless_predator.enabled then
                enUse=45
            end
            if COUNTERS.en>=enUse then
                return true
            else
                return _Wait
            end
        end
    elseif IROSpecID==266 then -- Warlock Demo
        if skillName=="demonbolt" and
        Hekili.DisplayPool.Primary.Buttons[1].Action=="demonbolt" and
        Hekili.DisplayPool.Primary.Buttons[2].Action=="summon_demonic_tyrant" then
            if SSmorethan(2) then
                return _HoG
            else
                return _Tyrant
            end
        elseif skillName=="shadow_bolt" and
        Hekili.DisplayPool.Primary.Buttons[1].Action=="shadow_bolt" and
        Hekili.DisplayPool.Primary.Buttons[2].Action=="summon_demonic_tyrant"  then
            if SSmorethan(2) then
                return _HoG
            else
                return _Tyrant
            end
        elseif skillName=="shadow_bolt" and
        Hekili.DisplayPool.Primary.Buttons[1].Action=="shadow_bolt" and
        Hekili.DisplayPool.Primary.Buttons[2].Action=="hand_of_guldan" and
        Hekili.DisplayPool.Primary.Buttons[3].Action=="summon_demonic_tyrant" and
        SSmorethan(2) and
        Hekili.State.buff.nether_portal.up then
            return _HoG
        elseif skillName=="demonbolt" and COUNTERS["castingdb"]==1 then
            return _Wait
        elseif skillName=="hand_of_guldan" and (COUNTERS["castinghog"]==1 or not IsUsableSpell("Hand of Gul'dan"))  then --hand_of_guldan
            return _Wait
        elseif skillName=="call_dreadstalkers" and not IsUsableSpell("call dreadstalkers")  then --call DS
            return _Wait
        elseif skillName=="power_siphon" and-- power_siphon
        Hekili.DisplayPool.Primary.Buttons[1].Action=="power_siphon" and
        Hekili.DisplayPool.Primary.Buttons[2].Action=="summon_demonic_tyrant" then
            return _Tyrant
        end
    elseif IROSpecID==72 then -- War Fury
        if skillName=="whirlwind" and COUNTERS["justuseww"]==1 then
            return _Wait
        elseif skillName=="raging_blow" and COUNTERS["justuserb"]==1 then
            return _Wait
        end
    elseif IROSpecID==71 then -- War Arm
        if skillName=="rend" and COUNTERS["justuserend"]==1 then
            return _Wait
        elseif skillName=="slam" and COUNTERS["justuseslam"]==1 then
            return _Wait
        elseif skillName=="overpower" and COUNTERS["justuseoverpower"]==1 then
            return _Wait
        end
    elseif IROSpecID==254 then -- Hun MM
        if skillName=="multishot" and COUNTERS["justusemultishot"]==1 then
            return _Wait
        elseif skillName=="aimed_shot" and COUNTERS["justuseaimedshot"]==1 then
            return _Wait
        elseif skillName=="steady_shot" and COUNTERS["justusesteadyshot"]==1 then
            return _Wait
        elseif skillName=="arcane_shot" and COUNTERS["justusearcaneshot"]==1 then
            return _Wait
        end
    elseif IROSpecID==253 then -- Hun BM
        if skillName=="multishot" and COUNTERS["justusemultishot"]==1 then
            return _Wait
        end
    elseif IROSpecID==252 then -- DK Unholy

    elseif IROSpecID==263 then -- Shaman Enh
        if skillName=="sundering" then
            return UnitCanAttack("player","target")and(IsSpellInRange("Lava Lash","target")==1)
        end
    end
    return true
end

IROVar.Hekili.CheckSpecialTreatment = CheckSpecialTreatment

if not TMWDB.offGCDSpellName then
    TMWDB.offGCDSpellName={}
    TMWDB.offGCDSpellName.version=select(1,GetBuildInfo())
else
    local version=GetBuildInfo()
    if TMWDB.offGCDSpellName.version~=version then
        TMWDB.offGCDSpellName={}
        TMWDB.offGCDSpellName.version=version
    end
end
--UNIT_SPELLCAST_SUCCEEDED
TMW_ST:AddEvent("UNIT_SPELLCAST_SUCCEEDED",
function(event,arg1,arg2)
    if arg1~="player" then return end
    if not TMWDB.offGCDSpellName[Hekili.State.player.lastoffgcd] then
        TMWDB.offGCDSpellName[Hekili.State.player.lastoffgcd]=true
    end
end)

local function Check1stSpellIsOffGCD(forced)
    local firstAction = Hekili.DisplayPool.Primary.Recommendations[1].actionName
    if forced==nil then
        IROVar.UpdateCounter("hekilioffgcd",TMWDB.offGCDSpellName[firstAction] and 1 or 0)
    else
        IROVar.UpdateCounter("hekilioffgcd",forced and 1 or 0)
    end
end

--C_Timer.NewTicker(0.1,Check1stSpellIsOffGCD)

function IROVar.Hekili.UpdateToggleCounter()
    local cd=Hekili.DB.profile.toggles.cooldowns.value and 1 or 0
    local modevalue=Hekili.DB.profile.toggles.mode.value
    local mode=((modevalue=="automatic") and 1) or ((modevalue=="aoe") and 2) or 0
    local def=Hekili.DB.profile.toggles.defensives.value and 1 or 0
    TMW_ST:UpdateCounter("hekilicdstatus",cd)
    TMW_ST:UpdateCounter("hekilidefstatus",def)
    TMW_ST:UpdateCounter("hekilimodestatus",mode)
end
C_Timer.After(2,IROVar.Hekili.UpdateToggleCounter)

if not Hekili then
    print("need Addon Hekili Priority Helper to process!!!!!!!")
end

function IROVar.Hekili.CheckKeyEnable()
    for k,v in pairs(CounterToKey) do
        KeyEnable[v]=COUNTERS[k]==1
    end
end

local _OldKey=nil
local _CurrentKey=nil
local _ShouldUseOldKey=false
--local _ShouldUseOldKeyHandle=C_Timer.NewTimer(0.1,function() end)

local _OldSet=nil

local function DumpSetHekiliPrimary()
    local set={}
    for i=1,10 do
        local action=Hekili.DisplayPool.Primary.Buttons[i].Action
        if action then
            table.insert(set,action)
        else break end
    end
    return set
end

local function IsSameSet(a,b)
    if #a~=#b then return false end
    for i=1,#a do
        if a[i]~=b[i] then
            return false
        end
    end
    return true
end

local function FindAndUseKey(skill)
    for _,v in pairs(Hekili.KeybindInfo[skill].upper) do
        if usedKey[v] and KeyEnable[v] then
            return v
        end
    end
end

function IROVar.Hekili.GetKeyBind()
    if _ShouldUseOldKey then
        if IsSameSet(_OldSet,DumpSetHekiliPrimary()) then
            return _OldKey
        else
            _ShouldUseOldKey=false
        end
    end
    local key=""
    local Primary=Hekili.DisplayPool.Primary
    --Hekili.DisplayPool.Primary.Buttons[1]
    --not TMWDB.offGCDSpellName[Hekili.DisplayPool.Primary.Buttons[1].Action]
    if Primary.Recommendations[1].exact_time and
    Primary.Recommendations[1].indicator ~= "cycle" and
    not TMWDB.offGCDSpellName[Primary.Buttons[1].Action] and
    Primary.Recommendations[1].exact_time-TMW.time>0.3 then
        return ""
    end
    for i=1,9 do
        if Primary.Buttons[i] then
            local CSTStatus=CheckSpecialTreatment(Primary.Buttons[i].Action)
            if CSTStatus then
                if CSTStatus==_Wait then return "" end
                if CSTStatus==_Tyrant then
                    local key2=FindAndUseKey("summon_demonic_tyrant")
                    if key2 then return key2 else print("ERROR CANNOT FIND KEY summon_demonic_tyrant") end
                end
                if CSTStatus==_HoG then
                    local key2=FindAndUseKey("hand_of_guldan")
                    if key2 then return key2 else print("ERROR CANNOT FIND KEY hand_of_guldan")  end
                end
                local UseCD=COUNTERS["hekilicheckcd"]==1
                local UseCycleEnemy=COUNTERS["cycleenemy"]==1
                if UseCD then
                    local lastStart = Primary.Buttons[i].Cooldown.lastStart or 0
                    --Hekili.DisplayPool.Primary.Buttons[1].Cooldown.lastStart
                    --Hekili.DisplayPool.Primary.Buttons[1].Cooldown.lastDuration
                    --Hekili.DisplayPool.Primary.Buttons[i].unusable
                    local lastDuration= Primary.Buttons[i].Cooldown.lastDuration or 0
                    local CDready = (lastStart+lastDuration-TMW.time)<0.2
                    local usable = not Primary.Buttons[i].unusable
                    if CDready and usable then
                        key=Primary.Buttons[i].Keybinding:GetText()
                        if usedKey[key] and KeyEnable[key] then
                            if UseCycleEnemy and Primary.Recommendations[i].indicator == "cycle" then
                                return "cycle"
                            end
                            --if not IsUsableSpell(Hekili.State.action[Hekili.DisplayPool.Primary.Buttons[i].Action].name) then return ""end
                            return key
                        end
                    end
                else
                    key=Primary.Buttons[i].Keybinding:GetText()
                    if usedKey[key] and KeyEnable[key] then
                        if UseCycleEnemy and Primary.Recommendations[i].indicator == "cycle" then
                            return "cycle"
                        end
                        --if not IsUsableSpell(Hekili.State.action[Hekili.DisplayPool.Primary.Buttons[i].Action].name) then return ""end
                        return key
                    end
                end
            end
        end
    end
    return ""
end

TMW_ST:AddEvent("UNIT_SPELLCAST_START",function(event,unitToken)
    if unitToken=="player" then
        _ShouldUseOldKey=false
        _OldKey=_CurrentKey
    end
end)

TMW_ST:AddEvent("UNIT_SPELLCAST_INTERRUPTED",function(event,unitToken)
    if unitToken=="player" then
        _ShouldUseOldKey=true
        _OldSet=DumpSetHekiliPrimary()
    end
end)

TMW_ST:AddEvent("UNIT_SPELLCAST_SUCCEEDED",function(event,unitToken)
    if unitToken=="player" then
        _ShouldUseOldKey=false
    end
end)

local _KeyNextTime = 0
HekiliIconSender={}
local function UpdateKey()
    local k=IROVar.Hekili.GetKeyBind()
    --local currentKey=ColorToKey[HekiliIconSender[c].attributes.calculatedState.Color]
    if _CurrentKey~=k or TMW.time > _KeyNextTime then
        local c = COUNTERS.iconuse
        c= c+1 > 4 and 1 or c+1
        TMW_ST:UpdateCounter("iconuse",c)
        _CurrentKey=k
        _KeyNextTime=TMW.time+0.3
        local color=KeyToColor[k]
        HekiliIconSender[1].attributes.calculatedState.Color=color
        HekiliIconSender[2].attributes.calculatedState.Color=color
        HekiliIconSender[3].attributes.calculatedState.Color=color
        HekiliIconSender[4].attributes.calculatedState.Color=color
        HekiliIconSender[1]:Hide()
        HekiliIconSender[2]:Hide()
        HekiliIconSender[3]:Hide()
        HekiliIconSender[4]:Hide()
        HekiliIconSender[c]:Show()
    end
    if k=="cycle" then
        Check1stSpellIsOffGCD(true)
    else
        Check1stSpellIsOffGCD()
    end
    --IROVar.UpdateCounter("hekilikey",usedKey[k])
end

local function SetupKey()
    if HekiliIconSender[1] and HekiliIconSender[2] then
        TMW_ST:UpdateCounter("iconuse",1)
        C_Timer.NewTicker(0.05,UpdateKey)
    else
        C_Timer.After(0.8,SetupKey)
    end
end
C_Timer.After(2,SetupKey)

function IROVar.Hekili.cooldownsON()
    if not Hekili.DB.profile.toggles.cooldowns.value then
        Hekili:FireToggle("cooldowns")
        IROVar.Hekili.UpdateToggleCounter()
    end
end
function IROVar.Hekili.cooldownsOFF()
    if Hekili.DB.profile.toggles.cooldowns.value then
        Hekili:FireToggle("cooldowns")
        IROVar.Hekili.UpdateToggleCounter()
    end
end
function IROVar.Hekili.CheckDPS()
    local t=IROVar.DPS.PredictTargetLifeTime()
    IROVar.UpdateCounter("targethptimeremain",t)
    local a=COUNTERS.overridecd
    if a>=1 then return end
    local c=COUNTERS["hekiliautocd"]
    if c>0 then
        if t==0 then IROVar.Hekili.cooldownsOFF() return end
        if not UnitCanAttack("player", "target") then IROVar.Hekili.cooldownsOFF() return end
        if t>=c then
            IROVar.Hekili.cooldownsON()
        else
            IROVar.Hekili.cooldownsOFF()
        end
    end
end

local CheckDPS=IROVar.Hekili.CheckDPS

IROVar.DPS.TickerHandle:Cancel()
IROVar.DPS.TickerHandle=C_Timer.NewTicker(0.8,CheckDPS)

IROVar.UnRegister_SPELL_UPDATE_COOLDOWN_scrip_CALLBACK("Target Life Time Remain")
IROVar.Register_PLAYER_TARGET_CHANGED_scrip_CALLBACK("IROVar.DPS CheckDPS",CheckDPS)
--Hekili.DB.profile.toggles.cooldowns.value==true
--UnitCanAttack("player", "target")
--IROVar.Register_PLAYER_TARGET_CHANGED_scrip_CALLBACK(name,callBack)

function IROVar.Hekili.CheckNextSkill(s1,counterName)
    local s2=Hekili.DisplayPool.Primary.Recommendations[2].actionName
    local s1_SkillName=Hekili.State.action[s1].name
    if s1~=s2 and IsCurrentSpell(s1_SkillName)then
        IROVar.DelayCT(counterName,IROVar.HasteFactor*1.2)
    end
end



local function SaveOptionToVar()
    local Options=TMWDB
    local function SaveCounter(a)
        Options[a]=COUNTERS[a]
    end
    for i=97,120 do -- Keep Counter "a" - "x"
        local counterName=string.char(i)
        SaveCounter(counterName)
    end
    local saveName = {
        "needusehealskill",
        "wantinterrupt",
        "interlevel",
        "wanthealthstone",
        "wanthealthpotion",
        "hekiliautocd",
        "needusecleanenrage",
        --"hekilicdstatus"
        "cycleenemy",
        "cyclekick",
        "stoptargetoutcombat",
        "wantstun",
        "needuseminordefensive",
        "healingpotionselected",
    }
    for _,v in pairs(saveName) do
        SaveCounter(v)
    end
end

local Loaded = false

C_Timer.NewTicker(3,function()
    if not Loaded or InCombatLockdown() then return end
    SaveOptionToVar()
end)


local function LoadOptionFromVar()
    if not COUNTERS["justrunonce"] or COUNTERS["justrunonce"]==0 then
        C_Timer.After(2,LoadOptionFromVar)
        return
    end
    Loaded=true
    local Options=TMWDB
    local function LoadCounter(a)
        if Options[a] and type(Options[a])=="number" then
            TMW_ST:UpdateCounter(a,Options[a])
        end
    end
    for i=97,120 do -- Keep Counter "a" - "x"
        local counterName=string.char(i)
        LoadCounter(counterName)
    end
    IROVar.Hekili.CheckKeyEnable()
    local saveName = {
        "needusehealskill",
        "wantinterrupt",
        "interlevel",
        "wanthealthstone",
        "wanthealthpotion",
        "hekiliautocd",
        "needusecleanenrage",
        --"hekilicdstatus",
        "cycleenemy",
        "cyclekick",
        "stoptargetoutcombat",
        "wantstun",
        "needuseminordefensive",
        "healingpotionselected",
    }
    for _,v in pairs(saveName) do
        LoadCounter(v)
    end
    IROVar.Hekili.CheckDPS()
end

C_Timer.After(2,LoadOptionFromVar) -- load after login,

local function CheckDragonfireBombDispenser() -- Trinket in DF raid 2
    local id=408671
    --GetSpellCharges(408671)
    local currentCharges, maxCharges, cooldownStart, cooldownDuration, chargeModRate = GetSpellCharges(id)
    local FullCharge=currentCharges==3
    if FullCharge then return true end
    local nextChargeTime=cooldownStart+cooldownDuration
    local nearylFullCharge=currentCharges==2 and (nextChargeTime-TMW.time<5 or (select(3,AuraUtil.FindAuraByName("Flash of Inspiration", "player"))or 0)>=58)
    if nearylFullCharge then return true end
    local dieTime=COUNTERS["targethptimeremain"]
    local state=Hekili.State
    if state.boss and (currentCharges>=2 or (dieTime<=20 and dieTime>=8)) then return true end
    if state.active_enemies >=3 and dieTime<=7 and dieTime>=1 then return true end
    return false
end

local CallDSEnd=0
local HoGEnd=GetTime()+30000

if Hekili.Class.specs[266] then
    table.insert(Hekili.Class.specs[266].hooks.COMBAT_LOG_EVENT_UNFILTERED,
    function( _, subtype, _, source, _, _, _, destGUID, _, _, _, spellID, spellName )
        if source~=IROVar.playerGUID then return end
        if subtype == "SPELL_CAST_SUCCESS" then
            if spellID == 104316 then -- Call DSs
                CallDSEnd=GetTime()+12
                HoGEnd=CallDSEnd+30000
            end
            if spellID == 105174 then -- HoG
                local now=GetTime()
                if now<CallDSEnd then
                    HoGEnd=min(HoGEnd,CallDSEnd,Hekili.State.gcd.execute*8+now)
                end
            end
        end
    end)
end

local function GetHoGTimerAfterCallDSs(t)
    t=t or GetTime()
    local ans=HoGEnd-t
    return ans>0 and ans or 3000
end

if Hekili then
    Hekili.State.GetHoGTimerAfterCallDSs=GetHoGTimerAfterCallDSs
    Hekili.State.CheckDragonfireBombDispenser=CheckDragonfireBombDispenser
else
    C_Timer.After(5,function()
        Hekili.State.GetHoGTimerAfterCallDSs=GetHoGTimerAfterCallDSs
        Hekili.State.CheckDragonfireBombDispenser=CheckDragonfireBombDispenser
    end)
end


